<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Alvin]]></title>
  <link href="http://freealvin.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://freealvin.github.io/"/>
  <updated>2015-04-11T17:56:09+08:00</updated>
  <id>http://freealvin.github.io/</id>
  <author>
    <name><![CDATA[Alvin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 类的final引用成员实例]]></title>
    <link href="http://freealvin.github.io/blog/2015/04/11/java-lei-de-finalyin-yong-cheng-yuan-shi-li/"/>
    <updated>2015-04-11T08:32:47+08:00</updated>
    <id>http://freealvin.github.io/blog/2015/04/11/java-lei-de-finalyin-yong-cheng-yuan-shi-li</id>
    <content type="html"><![CDATA[<p>final修饰符大都用于基本类型，或不可变类的域（如果类中的每个方法都不会改变其对象，这种类就是不可变的类。例如，String类就是一个不可变的类）。对于可变的类使用final修饰符可能会对读者造成混乱。例如，private final Date hiredate；</p>

<p>仅仅意味着存储在hiredate变量中的<em>对象引用</em>在对象构造之后不能被改变，而不意味着hiredate对象是一个常量。任何方法都可以对hiredate引用的对象调用setTime更改器。</p>

<p>``` java</p>

<pre><code>package per.alvin.demos;

public class User {

        private String name;
        private int age;

        public User(){

        }
        public User(String name, int age){
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
}
</code></pre>

<p>```</p>

<p>``` java</p>

<pre><code>package per.alvin.demos;

public class Item {
    private final User user;

    public Item(User user){
        this.user = user;
    }
    public User getUser() {
        return user;
    }

    public static void main(String [] arags){
        User alvin = new User("alvin", 22);
        Item item = new Item(alvin);

        System.out.println(item.getUser().getName());
        alvin.setName("nathan");
        System.out.println(item.getUser().getName());

    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
