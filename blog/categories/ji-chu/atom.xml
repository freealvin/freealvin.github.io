<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 基础 | Alvin]]></title>
  <link href="http://freealvin.github.io/blog/categories/ji-chu/atom.xml" rel="self"/>
  <link href="http://freealvin.github.io/"/>
  <updated>2015-04-13T02:09:06+08:00</updated>
  <id>http://freealvin.github.io/</id>
  <author>
    <name><![CDATA[Alvin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java参数传递]]></title>
    <link href="http://freealvin.github.io/blog/2015/04/13/javacan-shu-chuan-di/"/>
    <updated>2015-04-13T01:55:00+08:00</updated>
    <id>http://freealvin.github.io/blog/2015/04/13/javacan-shu-chuan-di</id>
    <content type="html"><![CDATA[<p>参数传递分为值传递和引用传递，Java是面向对象的编程语言，又是如何传递参数的呢？</p>

<!--more-->


<p>Java的值传递和其他语言的类似，没有什么特别的，这里主要介绍对象作为参数的传递。对象作为参数，传递的是对象的引用吗？其实不是。</p>

<p>先面给出一个例子
```java</p>

<p>public static void swap(Employee x, Employee y)
{</p>

<pre><code>Employee temp = x;
x = y;
y = temp;
</code></pre>

<p>}
```</p>

<p>如果Java对对象采用的是引用调用，那么这个方法就能实现交换数据的效果：</p>

<p>```java</p>

<pre><code>Employee a = new Employee("alvin");
Employee b = new Employee("nathan");
swap(a,b);
</code></pre>

<p>```
结果会是a变成nathan， b变成alvin吗？最终的结果并没有变化，a仍为alvin，b也仍为nathan。</p>

<p>这个过程说明，Java采用的不是引用调用。实际上，对象引用进行的是<bold>值传递</bold>。</p>

<p>下面总结一下：</p>

<pre><code>1. 方法不能修改一个基本数据类型的参数

2. 方法可以改变对象参数的状态

3. 方法不能对对象参数引用一个新对象。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 类的final引用成员实例]]></title>
    <link href="http://freealvin.github.io/blog/2015/04/11/java-lei-de-finalyin-yong-cheng-yuan-shi-li/"/>
    <updated>2015-04-11T08:32:47+08:00</updated>
    <id>http://freealvin.github.io/blog/2015/04/11/java-lei-de-finalyin-yong-cheng-yuan-shi-li</id>
    <content type="html"><![CDATA[<p>final修饰符大都用于基本类型，或不可变类的域（如果类中的每个方法都不会改变其对象，这种类就是不可变的类。例如，String类就是一个不可变的类）。对于可变的类使用final修饰符可能会对读者造成混乱。例如，private final Date hiredate；</p>

<p>仅仅意味着存储在hiredate变量中的<em>对象引用</em>在对象构造之后不能被改变，而不意味着hiredate对象是一个常量。任何方法都可以对hiredate引用的对象调用setTime更改器。</p>

<p>``` java</p>

<pre><code>package per.alvin.demos;

public class User {

        private String name;
        private int age;

        public User(){

        }
        public User(String name, int age){
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
}
</code></pre>

<p>```</p>

<p>``` java</p>

<pre><code>package per.alvin.demos;

public class Item {
    private final User user;

    public Item(User user){
        this.user = user;
    }
    public User getUser() {
        return user;
    }

    public static void main(String [] arags){
        User alvin = new User("alvin", 22);
        Item item = new Item(alvin);

        System.out.println(item.getUser().getName());
        alvin.setName("nathan");
        System.out.println(item.getUser().getName());

    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
